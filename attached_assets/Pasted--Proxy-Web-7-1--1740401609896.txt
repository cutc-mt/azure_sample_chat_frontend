## チャットアプリ連携型 Proxy 経由Webアクセスアプリ 要求仕様書 (改訂版7)

### 1. 概要

本アプリケーションは、指定されたプロキシサーバーを経由してチャットアプリのバックエンドと通信し、チャット形式で質問応答を行うWebアプリケーションです。Streamlitを用いてPythonでWeb UIを提供し、Pyinstallerでの単体アプリ化を視野に入れています。ユーザーはチャット履歴の管理や設定変更を行うことができます。

### 2. 機能

#### 2.1 設定

*   **プロキシ設定:** ユーザーは、Webアクセスに使用するプロキシサーバーのURL（例: `http://proxy.example.com:8080`）を設定できます。
*   **APIエンドポイント設定:** チャットアプリのバックエンドAPIのエンドポイントURLを設定できます。 (設定画面から設定可能)
*   **プロンプトテンプレート設定:** 質問送信時に使用するプロンプトテンプレートを設定できます。
*   **検索パラメータ設定:** 検索モード、取得件数、スコア閾値などの検索パラメータを設定できます。
*   **その他設定:** セマンティックランカー、セマンティックキャプション、フォローアップ質問、セキュリティフィルタなどのオプションを設定できます。

#### 2.2 チャットUI

*   **チャット履歴表示:** 過去の質問と回答をチャット形式で表示します。
*   **質問入力:** 質問内容をテキスト入力フィールドに入力します。
*   **送信ボタン:** 質問をバックエンドに送信します。
*   **サジェストされたフォローアップ質問:** AIからサジェストされたフォローアップ質問をクリックすると、その質問が入力フィールドに反映されます。
*   **回答表示:** AIからの回答を表示します。
*   **回答詳細表示:** 回答の根拠となったデータポイントや思考過程などの詳細情報を表示できます。(展開/格納可能)
*   **チャット履歴管理:** 過去のチャット履歴を一覧表示、ロード、エクスポート/インポート、削除できます。

#### 2.3 送信データ (POSTリクエスト)

リクエストボディ (JSON):

```json
{
  "messages": [ // 会話の履歴。各メッセージは { content: string, role: "user" | "assistant" } の形式
    { "content": "過去の質問1", "role": "user" },
    { "content": "過去の回答1", "role": "assistant" },
    { "content": "過去の質問2", "role": "user" },
    { "content": "過去の回答2", "role": "assistant" },
    // ... 過去の会話履歴 ...
    { "content": "今回の質問", "role": "user" }
  ],
  "context": {
    "overrides": { // 検索や応答生成のパラメータ
      "prompt_template": "プロンプトテンプレート (省略可)",
      "include_category": "含めるカテゴリ (省略可)",
      "exclude_category": "除外するカテゴリ (省略可)",
      "top": 取得するドキュメント数,
      "temperature": 温度パラメータ,
      "minimum_reranker_score": 最小リランカースコア,
      "minimum_search_score": 最小検索スコア,
      "retrieval_mode": "hybrid" | "text" | "vectors", // 検索モード
      "semantic_ranker": true | false, // セマンティックランカーの使用
      "semantic_captions": true | false, // セマンティックキャプションの使用
      "suggest_followup_questions": true | false, // フォローアップ質問の提案
      "use_oid_security_filter": true | false, // OIDセキュリティフィルター
      "use_groups_security_filter": true | false, // グループセキュリティフィルター
      "vector_fields": ["embedding"] | ["text", "embedding"] | ..., // ベクトル検索対象フィールド
      "use_gpt4v": true | false, // GPT4-Visionの使用
      "gpt4v_input": "text" | "images" | "textAndImages", // GPT4-Vの入力タイプ
      "language": "ja" | "en" | ..., // 言語コード
      "seed": 乱数シード値 (省略可)
    }
  },
  "session_state": "セッションステート (過去のレスポンスに含まれていれば渡す)"
}
```

#### 2.4 受信データ (レスポンス)

JSON形式:

```json
{
  "message": { "content": "応答内容", "role": "assistant" },
  "context": { // 検索結果やその他の情報
    "data_points": [
      // ... 検索されたドキュメント ...
    ],
    // ... その他のcontext情報 ...
  },
  "session_state": "セッションステート (クライアントに保存)",
  "error": "エラーメッセージ (省略可)"
}
```

#### 2.5 エラー処理

Webリクエストの送信、JSONのパースなど、各種処理で発生する可能性のあるエラーを適切に処理し、ユーザーに分かりやすいメッセージを表示します。

#### 2.6 セキュリティ

*   入力されたプロキシURLの形式を検証し、有効なURLであることを確認します。
*   データベースへのアクセスは、適切な権限管理のもとで行います。

### 3. UI

*   Streamlit を使用して、PythonでWebベースのチャットUIを提供します。
*   チャット履歴表示、質問入力、送信ボタン、フォローアップ質問表示などの基本要素を持ちます。
*   設定パネル、チャット履歴管理パネルをサイドバーに表示します。(展開/格納可能)
*   回答詳細表示機能 (データポイント、思考過程) を持ちます。(展開/格納可能)
*   多言語対応 (i18n)
*   各種設定項目をUIから変更可能

### 4. Pyinstallerでの単体アプリ化

Pyinstallerを使用して、本アプリケーションを単体で実行可能なアプリケーションとしてパッケージ化します。

### 5. 今後の拡張

*   多様なデータソースとの連携機能
*   高度な分析機能
*   UI/UXの改善

### 備考

*   本要求仕様書は、開発の進捗に合わせて随時更新されます。
*   不明な点や疑問点があれば、開発チームまでお問い合わせください。
